<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Serpentes Artificial Intelligence</title>
		<style>
			* {
				box-sizing: border-box;
			}
			body {
				margin: 0;
			}
			#canvas {
				width: min(100vw, 100vh);
				height: calc(min(100vw, 100vh) * calc(15 / 17));
			};
		</style>
	</head>
	<body onkeydown="keyDown(event);">
		<canvas id="canvas"></canvas>
	</body>
	<script>
		const canvas = document.getElementById("canvas");
		canvas.width = Math.min(innerWidth, innerHeight);
		canvas.height = Math.min(innerWidth, innerHeight) * (15 / 17);
		const ctx = canvas.getContext("2d");
		var gridX = 17;
		var gridY = 15;
		var resX = canvas.width / gridX;
		var resY = canvas.height / gridY;

		class NeuralNetwork {
			constructor(neuronCounts) {
				this.layers = [];
				for (let i = 0; i < neuronCounts.length - 1; i++) {
					this.layers.push(new Layer(neuronCounts[i], neuronCounts[i + 1]));
				};
			};
			run(inputs) {
				let outputs = this.layers[0].run(inputs);
				for (let i = 1; i < this.layers.length; i++) {
					outputs = this.layers[i].run(outputs);
				};
				return outputs;
			};
			lerp(n1, n2, multiplier) {
				return min * (1 - multiplier) + n2 * multiplier;
			};
		};
		class Layer {
			constructor(inputCount, outputCount) {
				this.inputs = new Array(inputCount);
				this.outputs = new Array(outputCount);
				this.biases = new Array(outputCount);
				this.weights = [];
				for (let i = 0; i < inputCount; i++) {
					this.weights[i] = new Array(outputCount);
				};
				for (let i = 0; i < this.inputs.length; i++) {
					for (let j = 0; j < this.outputs.length; j++) {
						this.weights[i][j] = Math.random() * 2 - 1;
					};
				};
				for (let i = 0; i < this.biases.length; i++) {
					this.biases[i] = Math.random() * 2 - 1;
				};
			};
			run(inputs) {
				this.inputs = [...inputs];
				for (let i = 0; i < this.outputs.length; i++) {
					let sum = 0;
					for (let j = 0; j < this.inputs.length; j++) {
						sum += this.inputs[j] * this.weights[j][i];
					};
					this.outputs[i] = this.activate(sum + this.biases[i]);
				};
				return this.outputs;
			};
			activate(number) {
				return 1 / (1 + Math.E ** (-number));
			};
		};

		class Snake {
			constructor() {
				this.body = [[3, 7], [2, 7], [1, 7], [0, 7]];
				this.speed = [1, 0];
				this.apple = [12, 7];
				this.dead = false;
				this.brain = new NeuralNetwork([6, 20, 20, 8, 4]); //dleft, dright, dup, ddown, applex, appley
				this.score = 0;
			};
			die() {
				this.dead = true;
			};
			draw() {
				for (let i = 0; i < this.body.length; i++) {
					ctx.fillStyle = this.dead ? `rgb(${255 - i * (127 / this.body.length)}, 0, 0)` : `rgb(0, 0, ${255 - i * (127 / this.body.length)})`;
					ctx.fillRect(this.body[i][0] * resX, this.body[i][1] * resY, resX, resY);
				};
				ctx.fillStyle = "#FF0000";
				ctx.fillRect(this.apple[0] * resX, this.apple[1] * resY, resX, resY);
			};
			tick() {
				if (!this.dead) {
					let inputs = [this.body[0][0], this.body[0][1], gridX - this.body[0][0] - 1, gridY - this.body[0][1] - 1, this.apple[0] / (gridX - 1), this.apple[1] / (gridY - 1)];
					let outputs = this.brain.run(inputs);
					let biggestOutput = outputs.map((number, i) => [i, number]).sort((a, b) => b[1] - a[1])[0][0];
					this.turn([[-1, 0], [1, 0], [0, -1], [0, 1]][biggestOutput]);
					this.body.unshift([this.body[0][0] + this.speed[0], this.body[0][1] + this.speed[1]]);
					if (this.apple[0] == this.body[0][0] && this.apple[1] == this.body[0][1]) {
						this.apple[0] = Math.floor(Math.random() * gridX);
						this.apple[1] = Math.floor(Math.random() * gridY);
						this.score++;
					} else {
						this.body.pop();
					};
					for (let i = 1; i < this.body.length; i++) {
						if (this.body[i][0] == this.body[0][0] && this.body[i][1] == this.body[0][1]) {
							this.die();
						};
					};
					if (this.body[0][0] < 0 || this.body[0][0] >= gridX || this.body[0][1] < 0 || this.body[0][1] >= gridY) {
						this.die();
					};
				};
			};
			turn(speed) {
				if (speed[0] !== this.speed[0] && speed[1] !== this.speed[1]) {
					this.speed = speed;
				};
			};
		};
		var snakes = new Array(70);
		for (let i = 0; i < 70; i++) {
			snakes[i] = new Snake();
		};
		function keyDown(e) {
			let snake = snakes[0];
			if (e.key == "ArrowLeft") snake.turn([-1, 0]);
			if (e.key == "ArrowRight") snake.turn([1, 0]);
			if (e.key == "ArrowUp") snake.turn([0, -1]);
			if (e.key == "ArrowDown") snake.turn([0, 1]);
		};

		function drawGrid() {
			let color = 0;
			for (let y = 0; y < canvas.height; y += resY) {
				for (let x = 0; x < canvas.width; x += resX) {
					ctx.fillStyle = (color = 1 - color) ? "#AAD751" : "#A2D149";
					ctx.fillRect(x, y, resX, resY);
				};
			};
		};
		function tick() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			drawGrid();
			snakes.forEach(snake => {
				snake.tick();
				snake.draw();
			});
		};
		setInterval(tick, 150);
	</script>
</html>
